function NoParkingSpotsException(a){this.name="NoParkingSpotsException",this.message=a,this.stack=(new Error).stack}function Parking(a,t,i,n,r){this.name=a,this.description=t,this.address=i,this.totalCapacity=r,this.availableCapacity=n}var config={url:"http://localhost:63342/ParkingDing/src/data/Parkings.json",localUrl:"http://localhost:63342/ParkingDing/src/data/Parkings.json",warningTreshold:30};NoParkingSpotsException.prototype=Object.create(Error.prototype),NoParkingSpotsException.prototype.constructor=NoParkingSpotsException;var parkingService=function(){return{get:function(){var a=new XMLHttpRequest;if(a.open("GET",config.url,!1),a.send(null),200===a.status){for(var t=JSON.parse(a.responseText),i=[],n=0,r=t.Parkings.parkings.length;r>n;n++){var o=t.Parkings.parkings[n],s=new Parking(o.name,o.description,o.address,o.availableCapacity,o.totalCapacity);i.push(s)}return i}},getById:function(){}}}(),vm={parkingSpots:null,showParkingSpots:function(a){if(!this.parkingSpots||"object"!=typeof this.parkingSpots)throw new NoParkingSpotsException("No parkingSpots defined");for(var t=document.querySelector(a),i="",n=0,r=this.parkingSpots.length;r>n;n++){var o=this.parkingSpots[n],s=0,p="parking";o.availableCapacity>0&&(s=(o.availableCapacity/o.totalCapacity*100).toFixed(2)),0===s?(p+=" parking-full",o.availableCapacity=0):s<config.warningTreshold&&(p+=" parking-warning"),i+='<li class="'+p+'">',i+='<p class="parking-sign">P</p>',i+='<p class="parking-description">'+o.description+"</p>",i+='<p class="parking-stats">'+o.availableCapacity+"/"+o.totalCapacity+"</p>",i+="</li>"}t.innerHTML=i}};!function(){vm.parkingSpots=parkingService.get(),vm.showParkingSpots("#parkingSpots")}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk5vUGFya2luZ1Nwb3RzRXhjZXB0aW9uLmpzIiwiUGFya2luZy5qcyIsImNvbmZpZy5qcyIsIlBhcmtpbmdTZXJ2aWNlLmpzIiwiUGFya2luZ092ZXJ2aWV3Vmlld01vZGVsLmpzIiwiYXBwLmpzIl0sIm5hbWVzIjpbIk5vUGFya2luZ1Nwb3RzRXhjZXB0aW9uIiwibWVzc2FnZSIsInRoaXMiLCJuYW1lIiwic3RhY2siLCJFcnJvciIsIlBhcmtpbmciLCJkZXNjcmlwdGlvbiIsImFkZHJlc3MiLCJhdmFpbGFibGVDYXBhY2l0eSIsInRvdGFsQ2FwYWNpdHkiLCJjb25maWciLCJ1cmwiLCJsb2NhbFVybCIsIndhcm5pbmdUcmVzaG9sZCIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwicGFya2luZ1NlcnZpY2UiLCJnZXQiLCJ4bWxIdHRwIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2VuZCIsInN0YXR1cyIsImRhdGEiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJwYXJraW5ncyIsImkiLCJsIiwiUGFya2luZ3MiLCJsZW5ndGgiLCJwIiwibmV3UCIsInB1c2giLCJnZXRCeUlkIiwidm0iLCJwYXJraW5nU3BvdHMiLCJzaG93UGFya2luZ1Nwb3RzIiwiZWxlbWVudFNlbGVjdG9yIiwiZWxlbWVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImh0bWxCdWlsZGVyIiwicGVyY2VudGFnZSIsInBhcmtpbmdDbGFzcyIsInRvRml4ZWQiLCJpbm5lckhUTUwiXSwibWFwcGluZ3MiOiJBQUFBLFFBQUFBLHlCQUFBQyxHQUVBQyxLQUFBQyxLQUFBLDBCQUNBRCxLQUFBRCxRQUFBQSxFQUNBQyxLQUFBRSxPQUFBLEdBQUFDLFFBQUFELE1DSkEsUUFBQUUsU0FBQUgsRUFBQUksRUFBQUMsRUFBQUMsRUFBQUMsR0FFQVIsS0FBQUMsS0FBQUEsRUFDQUQsS0FBQUssWUFBQUEsRUFDQUwsS0FBQU0sUUFBQUEsRUFDQU4sS0FBQVEsY0FBQUEsRUFDQVIsS0FBQU8sa0JBQUFBLEVDTkEsR0FBQUUsU0FFQUMsSUFBQSw0REFDQUMsU0FBQSw0REFDQUMsZ0JBQUEsR0ZHQWQseUJBQUFlLFVBQUFDLE9BQUFDLE9BQUFaLE1BQUFVLFdBQ0FmLHdCQUFBZSxVQUFBRyxZQUFBbEIsdUJHUkEsSUFBQW1CLGdCQUFBLFdBUUEsT0FDQUMsSUFBQSxXQUVBLEdBQUFDLEdBQUEsR0FBQUMsZUFJQSxJQUhBRCxFQUFBRSxLQUFBLE1BQUFaLE9BQUFDLEtBQUEsR0FDQVMsRUFBQUcsS0FBQSxNQUVBLE1BQUFILEVBQUFJLE9BQ0EsQ0FJQSxJQUFBLEdBSEFDLEdBQUFDLEtBQUFDLE1BQUFQLEVBQUFRLGNBQ0FDLEtBRUFDLEVBQUEsRUFBQUMsRUFBQU4sRUFBQU8sU0FBQUgsU0FBQUksT0FBQUYsRUFBQUQsRUFBQUEsSUFDQSxDQUNBLEdBQUFJLEdBQUFULEVBQUFPLFNBQUFILFNBQUFDLEdBQ0FLLEVBQUEsR0FBQTlCLFNBQUE2QixFQUFBaEMsS0FBQWdDLEVBQUE1QixZQUFBNEIsRUFBQTNCLFFBQUEyQixFQUFBMUIsa0JBQUEwQixFQUFBekIsY0FFQW9CLEdBQUFPLEtBQUFELEdBR0EsTUFBQU4sS0FJQVEsUUFBQSxpQkNoQ0FDLElBRUFDLGFBQUEsS0FDQUMsaUJBQUEsU0FBQUMsR0FFQSxJQUFBeEMsS0FBQXNDLGNBQUEsZ0JBQUF0QyxNQUFBLGFBRUEsS0FBQSxJQUFBRix5QkFBQSwwQkFNQSxLQUFBLEdBSEEyQyxHQUFBQyxTQUFBQyxjQUFBSCxHQUNBSSxFQUFBLEdBRUFmLEVBQUEsRUFBQUMsRUFBQTlCLEtBQUFzQyxhQUFBTixPQUFBRixFQUFBRCxFQUFBQSxJQUNBLENBQ0EsR0FBQUksR0FBQWpDLEtBQUFzQyxhQUFBVCxHQUVBZ0IsRUFBQSxFQUNBQyxFQUFBLFNBRUFiLEdBQUExQixrQkFBQSxJQUVBc0MsR0FBQVosRUFBQTFCLGtCQUFBMEIsRUFBQXpCLGNBQUEsS0FBQXVDLFFBQUEsSUFHQSxJQUFBRixHQUVBQyxHQUFBLGdCQUNBYixFQUFBMUIsa0JBQUEsR0FFQXNDLEVBQUFwQyxPQUFBRyxrQkFFQWtDLEdBQUEsb0JBR0FGLEdBQUEsY0FBQUUsRUFBQSxLQUNBRixHQUFBLGdDQUNBQSxHQUFBLGtDQUFBWCxFQUFBNUIsWUFBQSxPQUNBdUMsR0FBQSw0QkFBQVgsRUFBQTFCLGtCQUFBLElBQUEwQixFQUFBekIsY0FBQSxPQUNBb0MsR0FBQSxRQUdBSCxFQUFBTyxVQUFBSixLQzFDQSxXQUVBUCxHQUFBQyxhQUFBckIsZUFBQUMsTUFDQW1CLEdBQUFFLGlCQUFBIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBOb1BhcmtpbmdTcG90c0V4Y2VwdGlvbihtZXNzYWdlKVxue1xuICB0aGlzLm5hbWUgPSBcIk5vUGFya2luZ1Nwb3RzRXhjZXB0aW9uXCI7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrO1xufVxuXG5Ob1BhcmtpbmdTcG90c0V4Y2VwdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7IC8vbW9ldCB2YW4gZXJyb3Iga2xhc3NlIG92ZXJlcnZlblxuTm9QYXJraW5nU3BvdHNFeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTm9QYXJraW5nU3BvdHNFeGNlcHRpb247XG4iLCJmdW5jdGlvbiBQYXJraW5nKG5hbWUsIGRlc2NyaXB0aW9uLCBhZGRyZXNzLCBhdmFpbGFibGVDYXBhY2l0eSwgdG90YWxDYXBhY2l0eSlcbntcbiAgdGhpcy5uYW1lID0gbmFtZTtcbiAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICB0aGlzLnRvdGFsQ2FwYWNpdHkgPSB0b3RhbENhcGFjaXR5O1xuICB0aGlzLmF2YWlsYWJsZUNhcGFjaXR5ID0gYXZhaWxhYmxlQ2FwYWNpdHk7XG59XG4iLCJ2YXIgY29uZmlnID1cbntcbiAgdXJsOiBcImh0dHA6Ly9sb2NhbGhvc3Q6NjMzNDIvUGFya2luZ0Rpbmcvc3JjL2RhdGEvUGFya2luZ3MuanNvblwiLFxuICBsb2NhbFVybDogXCJodHRwOi8vbG9jYWxob3N0OjYzMzQyL1BhcmtpbmdEaW5nL3NyYy9kYXRhL1BhcmtpbmdzLmpzb25cIiwgLy9odHRwOi8vVXNlcnMvTWljaGVsbGUvR29vZ2xlJTIwRHJpdmUvRG9jdW1lbnRzLzNOTUNUL0Zyb250ZW5kJTIwRGV2ZWxvcG1lbnQvd2VlazYvUGFya2luZ0Rpbmcvc3JjL2RhdGEvUGFya2luZ3MuanNvblxuICB3YXJuaW5nVHJlc2hvbGQ6IDMwXG59O1xuIiwidmFyIHBhcmtpbmdTZXJ2aWNlID0gKGZ1bmN0aW9uKClcbntcbiAgLy9cInVzZSBzdHJpY3RcIjtcblxuICAvL3ByaXZhdGUgZmllbGRzXG5cbiAgLy9BUEksIHB1YmxpY1xuICAvL2FsbGVzIHdhdCBwdWJsaWVrIGlzIGluIG9iamVjdCByZXR1cm5lbiwgeyBuaWV0IG9wIGFuZGVyZSBsaWpuIHNjaHJpanZlbiEhXG4gIHJldHVybntcbiAgICBnZXQ6ZnVuY3Rpb24oKVxuICAgIHtcbiAgICAgIHZhciB4bWxIdHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICB4bWxIdHRwLm9wZW4oXCJHRVRcIiwgY29uZmlnLnVybCwgZmFsc2UpOyAvL2ZhbHNlIHdpbCB6ZWdnZW4gc3ljaHJvbmUgY2FsbCwgc3RvcHBlbiBtZXQgYWxsZXMgb20gZGF0YSBvcCB0ZSBoYWxlblxuICAgICAgeG1sSHR0cC5zZW5kKG51bGwpO1xuXG4gICAgICBpZih4bWxIdHRwLnN0YXR1cyA9PT0gMjAwKVxuICAgICAge1xuICAgICAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UoeG1sSHR0cC5yZXNwb25zZVRleHQpO1xuICAgICAgICB2YXIgcGFya2luZ3MgPSBbXTtcblxuICAgICAgICBmb3IodmFyIGkgPSAwLCBsID0gZGF0YS5QYXJraW5ncy5wYXJraW5ncy5sZW5ndGg7IGkgPCBsOyBpKyspXG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgcCA9IGRhdGEuUGFya2luZ3MucGFya2luZ3NbaV07XG4gICAgICAgICAgdmFyIG5ld1AgPSBuZXcgUGFya2luZyhwLm5hbWUsIHAuZGVzY3JpcHRpb24sIHAuYWRkcmVzcywgcC5hdmFpbGFibGVDYXBhY2l0eSwgcC50b3RhbENhcGFjaXR5KTtcblxuICAgICAgICAgIHBhcmtpbmdzLnB1c2gobmV3UCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFya2luZ3M7XG4gICAgICB9XG5cbiAgICB9LFxuICAgIGdldEJ5SWQ6ZnVuY3Rpb24oKXt9XG4gIH07XG5cbn0pKCk7XG4iLCJ2YXIgdm0gPVxue1xuICBwYXJraW5nU3BvdHM6IG51bGwsXG4gIHNob3dQYXJraW5nU3BvdHM6IGZ1bmN0aW9uKGVsZW1lbnRTZWxlY3RvcilcbiAge1xuICAgIGlmKCF0aGlzLnBhcmtpbmdTcG90cyB8fCB0eXBlb2YodGhpcy5wYXJraW5nU3BvdHMpICE9PSBcIm9iamVjdFwiKVxuICAgIHtcbiAgICAgIHRocm93IG5ldyBOb1BhcmtpbmdTcG90c0V4Y2VwdGlvbihcIk5vIHBhcmtpbmdTcG90cyBkZWZpbmVkXCIpO1xuICAgIH1cblxuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbGVtZW50U2VsZWN0b3IpO1xuICAgIHZhciBodG1sQnVpbGRlciA9IFwiXCI7XG5cbiAgICBmb3IodmFyIGkgPSAwLCBsID0gdGhpcy5wYXJraW5nU3BvdHMubGVuZ3RoOyBpIDwgbDsgaSsrKVxuICAgIHtcbiAgICAgIHZhciBwID0gdGhpcy5wYXJraW5nU3BvdHNbaV07XG5cbiAgICAgIHZhciBwZXJjZW50YWdlID0gMDtcbiAgICAgIHZhciBwYXJraW5nQ2xhc3MgPSBcInBhcmtpbmdcIjtcblxuICAgICAgaWYocC5hdmFpbGFibGVDYXBhY2l0eSA+IDApXG4gICAgICB7XG4gICAgICAgIHBlcmNlbnRhZ2UgPSAoKHAuYXZhaWxhYmxlQ2FwYWNpdHkgLyBwLnRvdGFsQ2FwYWNpdHkpICogMTAwKS50b0ZpeGVkKDIpO1xuICAgICAgfVxuXG4gICAgICBpZihwZXJjZW50YWdlID09PSAwKVxuICAgICAge1xuICAgICAgICBwYXJraW5nQ2xhc3MgKz0gXCIgcGFya2luZy1mdWxsXCI7XG4gICAgICAgIHAuYXZhaWxhYmxlQ2FwYWNpdHkgPSAwO1xuICAgICAgfVxuICAgICAgZWxzZSBpZihwZXJjZW50YWdlIDwgY29uZmlnLndhcm5pbmdUcmVzaG9sZClcbiAgICAgIHtcbiAgICAgICAgcGFya2luZ0NsYXNzICs9IFwiIHBhcmtpbmctd2FybmluZ1wiO1xuICAgICAgfVxuXG4gICAgICBodG1sQnVpbGRlciArPSAnPGxpIGNsYXNzPVwiJyArIHBhcmtpbmdDbGFzcyArICdcIj4nO1xuICAgICAgaHRtbEJ1aWxkZXIgKz0gJzxwIGNsYXNzPVwicGFya2luZy1zaWduXCI+UDwvcD4nO1xuICAgICAgaHRtbEJ1aWxkZXIgKz0gJzxwIGNsYXNzPVwicGFya2luZy1kZXNjcmlwdGlvblwiPicgKyBwLmRlc2NyaXB0aW9uICsgJzwvcD4nO1xuICAgICAgaHRtbEJ1aWxkZXIgKz0gJzxwIGNsYXNzPVwicGFya2luZy1zdGF0c1wiPicgKyBwLmF2YWlsYWJsZUNhcGFjaXR5ICsgJy8nICsgcC50b3RhbENhcGFjaXR5ICsgJzwvcD4nO1xuICAgICAgaHRtbEJ1aWxkZXIgKz0gJzwvbGk+JztcbiAgICB9XG5cbiAgICBlbGVtZW50LmlubmVySFRNTCA9IGh0bWxCdWlsZGVyO1xuICB9XG59O1xuIiwiKGZ1bmN0aW9uKClcbntcbiAgdm0ucGFya2luZ1Nwb3RzID0gcGFya2luZ1NlcnZpY2UuZ2V0KCk7XG4gIHZtLnNob3dQYXJraW5nU3BvdHMoXCIjcGFya2luZ1Nwb3RzXCIpO1xufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
